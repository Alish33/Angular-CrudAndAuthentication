import { asyncScheduler, Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
/**
 * Create an observable from a Database Reference or Database Query.
 * @param ref Database Reference
 * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')
 * @param listenType 'on' or 'once'
 * @param scheduler - Rxjs scheduler
 */
export function fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {
    return new Observable(subscriber => {
        let fn = null;
        fn = ref[listenType](event, (snapshot, prevKey) => {
            scheduler.schedule(() => {
                subscriber.next({ snapshot, prevKey });
            });
            if (listenType === 'once') {
                scheduler.schedule(() => subscriber.complete());
            }
        }, err => {
            scheduler.schedule(() => subscriber.error(err));
        });
        if (listenType === 'on') {
            return {
                unsubscribe() {
                    if (fn != null) {
                        ref.off(event, fn);
                    }
                }
            };
        }
        else {
            return {
                unsubscribe() {
                }
            };
        }
    }).pipe(map(payload => {
        const { snapshot, prevKey } = payload;
        let key = null;
        if (snapshot.exists()) {
            key = snapshot.key;
        }
        return { type: event, payload: snapshot, prevKey, key };
    }), share());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhYmFzZS9vYnNlcnZhYmxlL2Zyb21SZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQWlCLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPNUM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FBSSxHQUFrQixFQUNsQixLQUFrQixFQUNsQixVQUFVLEdBQUcsSUFBSSxFQUNqQixZQUEyQixjQUFjO0lBRWxFLE9BQU8sSUFBSSxVQUFVLENBQXFCLFVBQVUsQ0FBQyxFQUFFO1FBQ3JELElBQUksRUFBRSxHQUFlLElBQUksQ0FBQztRQUMxQixFQUFFLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNoRCxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxVQUFVLEtBQUssTUFBTSxFQUFFO2dCQUN6QixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ2pEO1FBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ1AsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUU7WUFDdkIsT0FBTztnQkFDTCxXQUFXO29CQUNULElBQUksRUFBRSxJQUFJLElBQUksRUFBRTt3QkFDZCxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDcEI7Z0JBQ0gsQ0FBQzthQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTztnQkFDTCxXQUFXO2dCQUNYLENBQUM7YUFDRixDQUFDO1NBQ0g7SUFDSCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1osTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDdEMsSUFBSSxHQUFHLEdBQWtCLElBQUksQ0FBQztRQUM5QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNyQixHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQzFELENBQUMsQ0FBQyxFQUNGLEtBQUssRUFBRSxDQUNSLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5ndWxhckZpcmVBY3Rpb24sIERhdGFiYXNlUXVlcnksIERhdGFiYXNlU25hcHNob3QsIExpc3RlbkV2ZW50IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBhc3luY1NjaGVkdWxlciwgT2JzZXJ2YWJsZSwgU2NoZWR1bGVyTGlrZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW50ZXJmYWNlIFNuYXBzaG90UHJldktleTxUPiB7XG4gIHNuYXBzaG90OiBEYXRhYmFzZVNuYXBzaG90PFQ+O1xuICBwcmV2S2V5OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBvYnNlcnZhYmxlIGZyb20gYSBEYXRhYmFzZSBSZWZlcmVuY2Ugb3IgRGF0YWJhc2UgUXVlcnkuXG4gKiBAcGFyYW0gcmVmIERhdGFiYXNlIFJlZmVyZW5jZVxuICogQHBhcmFtIGV2ZW50IExpc3RlbiBldmVudCB0eXBlICgndmFsdWUnLCAnYWRkZWQnLCAnY2hhbmdlZCcsICdyZW1vdmVkJywgJ21vdmVkJylcbiAqIEBwYXJhbSBsaXN0ZW5UeXBlICdvbicgb3IgJ29uY2UnXG4gKiBAcGFyYW0gc2NoZWR1bGVyIC0gUnhqcyBzY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWY8VD4ocmVmOiBEYXRhYmFzZVF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IExpc3RlbkV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuVHlwZSA9ICdvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXI6IFNjaGVkdWxlckxpa2UgPSBhc3luY1NjaGVkdWxlclxuKTogT2JzZXJ2YWJsZTxBbmd1bGFyRmlyZUFjdGlvbjxEYXRhYmFzZVNuYXBzaG90PFQ+Pj4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8U25hcHNob3RQcmV2S2V5PFQ+PihzdWJzY3JpYmVyID0+IHtcbiAgICBsZXQgZm46IGFueSB8IG51bGwgPSBudWxsO1xuICAgIGZuID0gcmVmW2xpc3RlblR5cGVdKGV2ZW50LCAoc25hcHNob3QsIHByZXZLZXkpID0+IHtcbiAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh7IHNuYXBzaG90LCBwcmV2S2V5IH0pO1xuICAgICAgfSk7XG4gICAgICBpZiAobGlzdGVuVHlwZSA9PT0gJ29uY2UnKSB7XG4gICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKCkpO1xuICAgICAgfVxuICAgIH0sIGVyciA9PiB7XG4gICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4gc3Vic2NyaWJlci5lcnJvcihlcnIpKTtcbiAgICB9KTtcblxuICAgIGlmIChsaXN0ZW5UeXBlID09PSAnb24nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBpZiAoZm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVmLm9mZihldmVudCwgZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KS5waXBlKFxuICAgIG1hcChwYXlsb2FkID0+IHtcbiAgICAgIGNvbnN0IHsgc25hcHNob3QsIHByZXZLZXkgfSA9IHBheWxvYWQ7XG4gICAgICBsZXQga2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xuICAgICAgICBrZXkgPSBzbmFwc2hvdC5rZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyB0eXBlOiBldmVudCwgcGF5bG9hZDogc25hcHNob3QsIHByZXZLZXksIGtleSB9O1xuICAgIH0pLFxuICAgIHNoYXJlKClcbiAgKTtcbn1cbiJdfQ==