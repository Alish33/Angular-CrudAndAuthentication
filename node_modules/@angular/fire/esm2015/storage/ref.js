import { createUploadTask } from './task';
import { from, of } from 'rxjs';
import { observeOn, switchMap } from 'rxjs/operators';
/**
 * Create an AngularFire wrapped Storage Reference. This object
 * creates observable methods from promise based methods.
 */
export function createStorageRef(ref, schedulers, keepUnstableUntilFirst) {
    return {
        getDownloadURL: () => of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),
        getMetadata: () => of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),
        delete: () => from(ref.delete()),
        child: (path) => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst),
        updateMetadata: (meta) => from(ref.updateMetadata(meta)),
        put: (data, metadata) => {
            const task = ref.put(data, metadata);
            return createUploadTask(task);
        },
        putString: (data, format, metadata) => {
            const task = ref.putString(data, format, metadata);
            return createUploadTask(task);
        },
        listAll: () => from(ref.listAll())
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3N0b3JhZ2UvcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBeUIsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDakUsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWF0RDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLEdBQWMsRUFDZCxVQUFrQyxFQUNsQyxzQkFBaUU7SUFFakUsT0FBTztRQUNMLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUN0QyxTQUFTLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQ3JDLHNCQUFzQixDQUN2QjtRQUNELFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUNuQyxTQUFTLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQ2xDLHNCQUFzQixDQUN2QjtRQUNELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLEtBQUssRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsc0JBQXNCLENBQUM7UUFDOUYsY0FBYyxFQUFFLENBQUMsSUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUUsR0FBRyxFQUFFLENBQUMsSUFBUyxFQUFFLFFBQXlCLEVBQUUsRUFBRTtZQUM1QyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNyQyxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFDRCxTQUFTLEVBQUUsQ0FBQyxJQUFZLEVBQUUsTUFBcUIsRUFBRSxRQUF5QixFQUFFLEVBQUU7WUFDNUUsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ25ELE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUNELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ25DLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlzdFJlc3VsdCwgUmVmZXJlbmNlLCBTZXR0YWJsZU1ldGFkYXRhLCBTdHJpbmdGb3JtYXQsIFVwbG9hZE1ldGFkYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlVXBsb2FkVGFzaywgY3JlYXRlVXBsb2FkVGFzayB9IGZyb20gJy4vdGFzayc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IG9ic2VydmVPbiwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlU3RvcmFnZVJlZmVyZW5jZSB7XG4gIGdldERvd25sb2FkVVJMKCk6IE9ic2VydmFibGU8YW55PjtcbiAgZ2V0TWV0YWRhdGEoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICBkZWxldGUoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICBjaGlsZChwYXRoOiBzdHJpbmcpOiBhbnk7XG4gIHVwZGF0ZU1ldGFkYXRhKG1ldGE6IFNldHRhYmxlTWV0YWRhdGEpOiBPYnNlcnZhYmxlPGFueT47XG4gIHB1dChkYXRhOiBhbnksIG1ldGFkYXRhPzogVXBsb2FkTWV0YWRhdGEgfCB1bmRlZmluZWQpOiBBbmd1bGFyRmlyZVVwbG9hZFRhc2s7XG4gIHB1dFN0cmluZyhkYXRhOiBzdHJpbmcsIGZvcm1hdD86IHN0cmluZyB8IHVuZGVmaW5lZCwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSB8IHVuZGVmaW5lZCk6IEFuZ3VsYXJGaXJlVXBsb2FkVGFzaztcbiAgbGlzdEFsbCgpOiBPYnNlcnZhYmxlPExpc3RSZXN1bHQ+O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBBbmd1bGFyRmlyZSB3cmFwcGVkIFN0b3JhZ2UgUmVmZXJlbmNlLiBUaGlzIG9iamVjdFxuICogY3JlYXRlcyBvYnNlcnZhYmxlIG1ldGhvZHMgZnJvbSBwcm9taXNlIGJhc2VkIG1ldGhvZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yYWdlUmVmKFxuICByZWY6IFJlZmVyZW5jZSxcbiAgc2NoZWR1bGVyczogybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsXG4gIGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnMkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+XG4pOiBBbmd1bGFyRmlyZVN0b3JhZ2VSZWZlcmVuY2Uge1xuICByZXR1cm4ge1xuICAgIGdldERvd25sb2FkVVJMOiAoKSA9PiBvZih1bmRlZmluZWQpLnBpcGUoXG4gICAgICBvYnNlcnZlT24oc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhciksXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gcmVmLmdldERvd25sb2FkVVJMKCkpLFxuICAgICAga2VlcFVuc3RhYmxlVW50aWxGaXJzdFxuICAgICksXG4gICAgZ2V0TWV0YWRhdGE6ICgpID0+IG9mKHVuZGVmaW5lZCkucGlwZShcbiAgICAgIG9ic2VydmVPbihzY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKSxcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiByZWYuZ2V0TWV0YWRhdGEoKSksXG4gICAgICBrZWVwVW5zdGFibGVVbnRpbEZpcnN0XG4gICAgKSxcbiAgICBkZWxldGU6ICgpID0+IGZyb20ocmVmLmRlbGV0ZSgpKSxcbiAgICBjaGlsZDogKHBhdGg6IHN0cmluZykgPT4gY3JlYXRlU3RvcmFnZVJlZihyZWYuY2hpbGQocGF0aCksIHNjaGVkdWxlcnMsIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QpLFxuICAgIHVwZGF0ZU1ldGFkYXRhOiAobWV0YTogU2V0dGFibGVNZXRhZGF0YSkgPT4gZnJvbShyZWYudXBkYXRlTWV0YWRhdGEobWV0YSkpLFxuICAgIHB1dDogKGRhdGE6IGFueSwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IHJlZi5wdXQoZGF0YSwgbWV0YWRhdGEpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVVwbG9hZFRhc2sodGFzayk7XG4gICAgfSxcbiAgICBwdXRTdHJpbmc6IChkYXRhOiBzdHJpbmcsIGZvcm1hdD86IFN0cmluZ0Zvcm1hdCwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IHJlZi5wdXRTdHJpbmcoZGF0YSwgZm9ybWF0LCBtZXRhZGF0YSk7XG4gICAgICByZXR1cm4gY3JlYXRlVXBsb2FkVGFzayh0YXNrKTtcbiAgICB9LFxuICAgIGxpc3RBbGw6ICgpID0+IGZyb20ocmVmLmxpc3RBbGwoKSlcbiAgfTtcbn1cbiJdfQ==