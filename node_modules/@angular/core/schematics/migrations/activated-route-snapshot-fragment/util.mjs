/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
import { isNullCheck, isSafeAccess } from '../../utils/typescript/nodes';
import { hasOneOfTypes, isNullableType } from '../../utils/typescript/symbol';
/**
 * Finds all the accesses of `ActivatedRouteSnapshot.fragment`
 * that need to be migrated within a particular file.
 */
export function findFragmentAccesses(typeChecker, sourceFile) {
    const results = new Set();
    sourceFile.forEachChild(function walk(node) {
        if (ts.isPropertyAccessExpression(node) && node.name.text === 'fragment' &&
            !results.has(node) && !isNullCheck(node) && !isSafeAccess(node) &&
            hasOneOfTypes(typeChecker, node.expression, ['ActivatedRouteSnapshot']) &&
            isNullableType(typeChecker, node)) {
            results.add(node);
        }
        node.forEachChild(walk);
    });
    return results;
}
/** Migrates an `ActivatedRouteSnapshot.fragment` access. */
export function migrateActivatedRouteSnapshotFragment(node) {
    // Turns `foo.fragment` into `foo.fragment!`.
    return ts.createNonNullExpression(node);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc2NoZW1hdGljcy9taWdyYXRpb25zL2FjdGl2YXRlZC1yb3V0ZS1zbmFwc2hvdC1mcmFnbWVudC91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxXQUFXLEVBQUUsWUFBWSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQ2hDLFdBQTJCLEVBQUUsVUFBeUI7SUFDeEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUM7SUFFdkQsVUFBVSxDQUFDLFlBQVksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFhO1FBQ2pELElBQUksRUFBRSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVU7WUFDcEUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUMvRCxhQUFhLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ3ZFLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsNERBQTREO0FBQzVELE1BQU0sVUFBVSxxQ0FBcUMsQ0FBQyxJQUFpQztJQUNyRiw2Q0FBNkM7SUFDN0MsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcbmltcG9ydCB7aXNOdWxsQ2hlY2ssIGlzU2FmZUFjY2Vzc30gZnJvbSAnLi4vLi4vdXRpbHMvdHlwZXNjcmlwdC9ub2Rlcyc7XG5pbXBvcnQge2hhc09uZU9mVHlwZXMsIGlzTnVsbGFibGVUeXBlfSBmcm9tICcuLi8uLi91dGlscy90eXBlc2NyaXB0L3N5bWJvbCc7XG5cbi8qKlxuICogRmluZHMgYWxsIHRoZSBhY2Nlc3NlcyBvZiBgQWN0aXZhdGVkUm91dGVTbmFwc2hvdC5mcmFnbWVudGBcbiAqIHRoYXQgbmVlZCB0byBiZSBtaWdyYXRlZCB3aXRoaW4gYSBwYXJ0aWN1bGFyIGZpbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRnJhZ21lbnRBY2Nlc3NlcyhcbiAgICB0eXBlQ2hlY2tlcjogdHMuVHlwZUNoZWNrZXIsIHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBTZXQ8dHMuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uPiB7XG4gIGNvbnN0IHJlc3VsdHMgPSBuZXcgU2V0PHRzLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbj4oKTtcblxuICBzb3VyY2VGaWxlLmZvckVhY2hDaGlsZChmdW5jdGlvbiB3YWxrKG5vZGU6IHRzLk5vZGUpIHtcbiAgICBpZiAodHMuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZSkgJiYgbm9kZS5uYW1lLnRleHQgPT09ICdmcmFnbWVudCcgJiZcbiAgICAgICAgIXJlc3VsdHMuaGFzKG5vZGUpICYmICFpc051bGxDaGVjayhub2RlKSAmJiAhaXNTYWZlQWNjZXNzKG5vZGUpICYmXG4gICAgICAgIGhhc09uZU9mVHlwZXModHlwZUNoZWNrZXIsIG5vZGUuZXhwcmVzc2lvbiwgWydBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90J10pICYmXG4gICAgICAgIGlzTnVsbGFibGVUeXBlKHR5cGVDaGVja2VyLCBub2RlKSkge1xuICAgICAgcmVzdWx0cy5hZGQobm9kZSk7XG4gICAgfVxuXG4gICAgbm9kZS5mb3JFYWNoQ2hpbGQod2Fsayk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vKiogTWlncmF0ZXMgYW4gYEFjdGl2YXRlZFJvdXRlU25hcHNob3QuZnJhZ21lbnRgIGFjY2Vzcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWdyYXRlQWN0aXZhdGVkUm91dGVTbmFwc2hvdEZyYWdtZW50KG5vZGU6IHRzLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbik6IHRzLk5vZGUge1xuICAvLyBUdXJucyBgZm9vLmZyYWdtZW50YCBpbnRvIGBmb28uZnJhZ21lbnQhYC5cbiAgcmV0dXJuIHRzLmNyZWF0ZU5vbk51bGxFeHByZXNzaW9uKG5vZGUpO1xufVxuIl19