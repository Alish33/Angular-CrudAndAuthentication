/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
import { getAngularDecorators } from '../../../utils/ng_decorators';
import { findParentClassDeclaration, getBaseTypeIdentifiers } from '../../../utils/typescript/class_declaration';
import { getPropertyNameText } from '../../../utils/typescript/property_name';
import { getInputNamesOfClass } from './directive_inputs';
import { QueryType } from './query-definition';
/**
 * Visitor that can be used to determine Angular queries within given TypeScript nodes.
 * Besides resolving queries, the visitor also records class relations and searches for
 * Angular input setters which can be used to analyze the timing usage of a given query.
 */
export class NgQueryResolveVisitor {
    constructor(typeChecker) {
        this.typeChecker = typeChecker;
        /** Resolved Angular query definitions. */
        this.resolvedQueries = new Map();
        /** Maps a class declaration to its class metadata. */
        this.classMetadata = new Map();
    }
    visitNode(node) {
        switch (node.kind) {
            case ts.SyntaxKind.PropertyDeclaration:
                this.visitPropertyDeclaration(node);
                break;
            case ts.SyntaxKind.ClassDeclaration:
                this.visitClassDeclaration(node);
                break;
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                this.visitAccessorDeclaration(node);
                break;
        }
        ts.forEachChild(node, n => this.visitNode(n));
    }
    visitPropertyDeclaration(node) {
        this._recordQueryDeclaration(node, node, getPropertyNameText(node.name));
    }
    visitAccessorDeclaration(node) {
        this._recordQueryDeclaration(node, null, getPropertyNameText(node.name));
    }
    visitClassDeclaration(node) {
        this._recordClassInputSetters(node);
        this._recordClassInheritances(node);
    }
    _recordQueryDeclaration(node, property, queryName) {
        if (!node.decorators || !node.decorators.length) {
            return;
        }
        const ngDecorators = getAngularDecorators(this.typeChecker, node.decorators);
        const queryDecorator = ngDecorators.find(({ name }) => name === 'ViewChild' || name === 'ContentChild');
        // Ensure that the current property declaration is defining a query.
        if (!queryDecorator) {
            return;
        }
        const queryContainer = findParentClassDeclaration(node);
        // If the query is not located within a class declaration, skip this node.
        if (!queryContainer) {
            return;
        }
        const sourceFile = node.getSourceFile();
        const newQueries = this.resolvedQueries.get(sourceFile) || [];
        this.resolvedQueries.set(sourceFile, newQueries.concat({
            name: queryName,
            type: queryDecorator.name === 'ViewChild' ? QueryType.ViewChild : QueryType.ContentChild,
            node,
            property,
            decorator: queryDecorator,
            container: queryContainer,
        }));
    }
    _recordClassInputSetters(node) {
        const resolvedInputNames = getInputNamesOfClass(node, this.typeChecker);
        if (resolvedInputNames) {
            const classMetadata = this._getClassMetadata(node);
            classMetadata.ngInputNames = resolvedInputNames;
            this.classMetadata.set(node, classMetadata);
        }
    }
    _recordClassInheritances(node) {
        const baseTypes = getBaseTypeIdentifiers(node);
        if (!baseTypes || baseTypes.length !== 1) {
            return;
        }
        const superClass = baseTypes[0];
        const baseClassMetadata = this._getClassMetadata(node);
        // We need to resolve the value declaration through the resolved type as the base
        // class could be declared in different source files and the local symbol won't
        // contain a value declaration as the value is not declared locally.
        const symbol = this.typeChecker.getTypeAtLocation(superClass).getSymbol();
        if (symbol && symbol.valueDeclaration && ts.isClassDeclaration(symbol.valueDeclaration)) {
            const extendedClass = symbol.valueDeclaration;
            const classMetadataExtended = this._getClassMetadata(extendedClass);
            // Record all classes that derive from the given class. This makes it easy to
            // determine all classes that could potentially use inherited queries statically.
            classMetadataExtended.derivedClasses.push(node);
            this.classMetadata.set(extendedClass, classMetadataExtended);
            // Record the super class of the current class.
            baseClassMetadata.superClass = extendedClass;
            this.classMetadata.set(node, baseClassMetadata);
        }
    }
    _getClassMetadata(node) {
        return this.classMetadata.get(node) || { derivedClasses: [], superClass: null, ngInputNames: [] };
    }
}
//# sourceMappingURL=data:application/json;base64,