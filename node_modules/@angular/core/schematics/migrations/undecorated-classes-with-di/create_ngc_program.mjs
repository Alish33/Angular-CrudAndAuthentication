/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { createProgram, readConfiguration } from '@angular/compiler-cli';
/** Creates an NGC program that can be used to read and parse metadata for files. */
export function createNgcProgram(createHost, tsconfigPath) {
    const { rootNames, options } = readConfiguration(tsconfigPath);
    // https://github.com/angular/angular/commit/ec4381dd401f03bded652665b047b6b90f2b425f made Ivy
    // the default. This breaks the assumption that "createProgram" from compiler-cli returns the
    // NGC program. In order to ensure that the migration runs properly, we set "enableIvy" to false.
    options.enableIvy = false;
    // Libraries which have been generated with CLI versions past v6.2.0, explicitly set the
    // flat-module options in their tsconfig files. This is problematic because by default,
    // those tsconfig files do not specify explicit source files which can be considered as
    // entry point for the flat-module bundle. Therefore the `@angular/compiler-cli` is unable
    // to determine the flat module entry point and throws a compile error. This is not an issue
    // for the libraries built with `ng-packagr`, because the tsconfig files are modified in-memory
    // to specify an explicit flat module entry-point. Our migrations don't distinguish between
    // libraries and applications, and also don't run `ng-packagr`. To ensure that such libraries
    // can be successfully migrated, we remove the flat-module options to eliminate the flat module
    // entry-point requirement. More context: https://github.com/angular/angular/issues/34985.
    options.flatModuleId = undefined;
    options.flatModuleOutFile = undefined;
    const host = createHost(options);
    // For this migration, we never need to read resources and can just return
    // an empty string for requested resources. We need to handle requested resources
    // because our created NGC compiler program does not know about special resolutions
    // which are set up by the Angular CLI. i.e. resolving stylesheets through "tilde".
    host.readResource = () => '';
    host.resourceNameToFileName = () => '$fake-file$';
    const ngcProgram = createProgram({ rootNames, options, host });
    // The "AngularCompilerProgram" does not expose the "AotCompiler" instance, nor does it
    // expose the logic that is necessary to analyze the determined modules. We work around
    // this by just accessing the necessary private properties using the bracket notation.
    const compiler = ngcProgram['compiler'];
    const program = ngcProgram.getTsProgram();
    return { host, ngcProgram, program, compiler };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX25nY19wcm9ncmFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zY2hlbWF0aWNzL21pZ3JhdGlvbnMvdW5kZWNvcmF0ZWQtY2xhc3Nlcy13aXRoLWRpL2NyZWF0ZV9uZ2NfcHJvZ3JhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQWUsYUFBYSxFQUFFLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFHckYsb0ZBQW9GO0FBQ3BGLE1BQU0sVUFBVSxnQkFBZ0IsQ0FDNUIsVUFBeUQsRUFBRSxZQUFvQjtJQUNqRixNQUFNLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBQyxHQUFHLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTdELDhGQUE4RjtJQUM5Riw2RkFBNkY7SUFDN0YsaUdBQWlHO0lBQ2pHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBRTFCLHdGQUF3RjtJQUN4Rix1RkFBdUY7SUFDdkYsdUZBQXVGO0lBQ3ZGLDBGQUEwRjtJQUMxRiw0RkFBNEY7SUFDNUYsK0ZBQStGO0lBQy9GLDJGQUEyRjtJQUMzRiw2RkFBNkY7SUFDN0YsK0ZBQStGO0lBQy9GLDBGQUEwRjtJQUMxRixPQUFPLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNqQyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBRXRDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVqQywwRUFBMEU7SUFDMUUsaUZBQWlGO0lBQ2pGLG1GQUFtRjtJQUNuRixtRkFBbUY7SUFDbkYsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDN0IsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUVsRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFFN0QsdUZBQXVGO0lBQ3ZGLHVGQUF1RjtJQUN2RixzRkFBc0Y7SUFDdEYsTUFBTSxRQUFRLEdBQWlCLFVBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBRTFDLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUMsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QW90Q29tcGlsZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcbmltcG9ydCB7Q29tcGlsZXJIb3N0LCBjcmVhdGVQcm9ncmFtLCByZWFkQ29uZmlndXJhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXItY2xpJztcbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG4vKiogQ3JlYXRlcyBhbiBOR0MgcHJvZ3JhbSB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlYWQgYW5kIHBhcnNlIG1ldGFkYXRhIGZvciBmaWxlcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZ2NQcm9ncmFtKFxuICAgIGNyZWF0ZUhvc3Q6IChvcHRpb25zOiB0cy5Db21waWxlck9wdGlvbnMpID0+IENvbXBpbGVySG9zdCwgdHNjb25maWdQYXRoOiBzdHJpbmcpIHtcbiAgY29uc3Qge3Jvb3ROYW1lcywgb3B0aW9uc30gPSByZWFkQ29uZmlndXJhdGlvbih0c2NvbmZpZ1BhdGgpO1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvY29tbWl0L2VjNDM4MWRkNDAxZjAzYmRlZDY1MjY2NWIwNDdiNmI5MGYyYjQyNWYgbWFkZSBJdnlcbiAgLy8gdGhlIGRlZmF1bHQuIFRoaXMgYnJlYWtzIHRoZSBhc3N1bXB0aW9uIHRoYXQgXCJjcmVhdGVQcm9ncmFtXCIgZnJvbSBjb21waWxlci1jbGkgcmV0dXJucyB0aGVcbiAgLy8gTkdDIHByb2dyYW0uIEluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IHRoZSBtaWdyYXRpb24gcnVucyBwcm9wZXJseSwgd2Ugc2V0IFwiZW5hYmxlSXZ5XCIgdG8gZmFsc2UuXG4gIG9wdGlvbnMuZW5hYmxlSXZ5ID0gZmFsc2U7XG5cbiAgLy8gTGlicmFyaWVzIHdoaWNoIGhhdmUgYmVlbiBnZW5lcmF0ZWQgd2l0aCBDTEkgdmVyc2lvbnMgcGFzdCB2Ni4yLjAsIGV4cGxpY2l0bHkgc2V0IHRoZVxuICAvLyBmbGF0LW1vZHVsZSBvcHRpb25zIGluIHRoZWlyIHRzY29uZmlnIGZpbGVzLiBUaGlzIGlzIHByb2JsZW1hdGljIGJlY2F1c2UgYnkgZGVmYXVsdCxcbiAgLy8gdGhvc2UgdHNjb25maWcgZmlsZXMgZG8gbm90IHNwZWNpZnkgZXhwbGljaXQgc291cmNlIGZpbGVzIHdoaWNoIGNhbiBiZSBjb25zaWRlcmVkIGFzXG4gIC8vIGVudHJ5IHBvaW50IGZvciB0aGUgZmxhdC1tb2R1bGUgYnVuZGxlLiBUaGVyZWZvcmUgdGhlIGBAYW5ndWxhci9jb21waWxlci1jbGlgIGlzIHVuYWJsZVxuICAvLyB0byBkZXRlcm1pbmUgdGhlIGZsYXQgbW9kdWxlIGVudHJ5IHBvaW50IGFuZCB0aHJvd3MgYSBjb21waWxlIGVycm9yLiBUaGlzIGlzIG5vdCBhbiBpc3N1ZVxuICAvLyBmb3IgdGhlIGxpYnJhcmllcyBidWlsdCB3aXRoIGBuZy1wYWNrYWdyYCwgYmVjYXVzZSB0aGUgdHNjb25maWcgZmlsZXMgYXJlIG1vZGlmaWVkIGluLW1lbW9yeVxuICAvLyB0byBzcGVjaWZ5IGFuIGV4cGxpY2l0IGZsYXQgbW9kdWxlIGVudHJ5LXBvaW50LiBPdXIgbWlncmF0aW9ucyBkb24ndCBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIGxpYnJhcmllcyBhbmQgYXBwbGljYXRpb25zLCBhbmQgYWxzbyBkb24ndCBydW4gYG5nLXBhY2thZ3JgLiBUbyBlbnN1cmUgdGhhdCBzdWNoIGxpYnJhcmllc1xuICAvLyBjYW4gYmUgc3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkLCB3ZSByZW1vdmUgdGhlIGZsYXQtbW9kdWxlIG9wdGlvbnMgdG8gZWxpbWluYXRlIHRoZSBmbGF0IG1vZHVsZVxuICAvLyBlbnRyeS1wb2ludCByZXF1aXJlbWVudC4gTW9yZSBjb250ZXh0OiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zNDk4NS5cbiAgb3B0aW9ucy5mbGF0TW9kdWxlSWQgPSB1bmRlZmluZWQ7XG4gIG9wdGlvbnMuZmxhdE1vZHVsZU91dEZpbGUgPSB1bmRlZmluZWQ7XG5cbiAgY29uc3QgaG9zdCA9IGNyZWF0ZUhvc3Qob3B0aW9ucyk7XG5cbiAgLy8gRm9yIHRoaXMgbWlncmF0aW9uLCB3ZSBuZXZlciBuZWVkIHRvIHJlYWQgcmVzb3VyY2VzIGFuZCBjYW4ganVzdCByZXR1cm5cbiAgLy8gYW4gZW1wdHkgc3RyaW5nIGZvciByZXF1ZXN0ZWQgcmVzb3VyY2VzLiBXZSBuZWVkIHRvIGhhbmRsZSByZXF1ZXN0ZWQgcmVzb3VyY2VzXG4gIC8vIGJlY2F1c2Ugb3VyIGNyZWF0ZWQgTkdDIGNvbXBpbGVyIHByb2dyYW0gZG9lcyBub3Qga25vdyBhYm91dCBzcGVjaWFsIHJlc29sdXRpb25zXG4gIC8vIHdoaWNoIGFyZSBzZXQgdXAgYnkgdGhlIEFuZ3VsYXIgQ0xJLiBpLmUuIHJlc29sdmluZyBzdHlsZXNoZWV0cyB0aHJvdWdoIFwidGlsZGVcIi5cbiAgaG9zdC5yZWFkUmVzb3VyY2UgPSAoKSA9PiAnJztcbiAgaG9zdC5yZXNvdXJjZU5hbWVUb0ZpbGVOYW1lID0gKCkgPT4gJyRmYWtlLWZpbGUkJztcblxuICBjb25zdCBuZ2NQcm9ncmFtID0gY3JlYXRlUHJvZ3JhbSh7cm9vdE5hbWVzLCBvcHRpb25zLCBob3N0fSk7XG5cbiAgLy8gVGhlIFwiQW5ndWxhckNvbXBpbGVyUHJvZ3JhbVwiIGRvZXMgbm90IGV4cG9zZSB0aGUgXCJBb3RDb21waWxlclwiIGluc3RhbmNlLCBub3IgZG9lcyBpdFxuICAvLyBleHBvc2UgdGhlIGxvZ2ljIHRoYXQgaXMgbmVjZXNzYXJ5IHRvIGFuYWx5emUgdGhlIGRldGVybWluZWQgbW9kdWxlcy4gV2Ugd29yayBhcm91bmRcbiAgLy8gdGhpcyBieSBqdXN0IGFjY2Vzc2luZyB0aGUgbmVjZXNzYXJ5IHByaXZhdGUgcHJvcGVydGllcyB1c2luZyB0aGUgYnJhY2tldCBub3RhdGlvbi5cbiAgY29uc3QgY29tcGlsZXI6IEFvdENvbXBpbGVyID0gKG5nY1Byb2dyYW0gYXMgYW55KVsnY29tcGlsZXInXTtcbiAgY29uc3QgcHJvZ3JhbSA9IG5nY1Byb2dyYW0uZ2V0VHNQcm9ncmFtKCk7XG5cbiAgcmV0dXJuIHtob3N0LCBuZ2NQcm9ncmFtLCBwcm9ncmFtLCBjb21waWxlcn07XG59XG4iXX0=